/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sensores.action;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;

import com.sensores.modelo.Actualizacion;
import com.sensores.modelo.Estado;
import com.sensores.modelo.Sensor;
import com.sensores.persistencia.Persistencia;
import com.sensores.utilidades.Utilidades;

/** 
 * MyEclipse Struts
 * Creation date: 08-03-2008
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class CambiarPersianaAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		DynaActionForm formulario = (DynaActionForm) form;
		Cookie[] cookies=request.getCookies();
		int ep=0;
		for (int i = 0; i < cookies.length; i++) {
			Cookie cookie=cookies[i];
			if(cookie.getName().equalsIgnoreCase("idSensor")){
				ep=Integer.parseInt(cookie.getValue());
				System.out.println("Id sensor en el action "+ep);
			}
		}
		System.out.println("Action cambiar persiana");
		if (ep!=0) {
			//int ep = ((Integer) request.getSession().getAttribute("ep")).intValue();// ((Integer)request.getAttribute("ep")).intValue();
			System.out.println("Id sensor en el action " + ep);
			Sensor sensor = Persistencia.cargarSensor(ep);
			Estado estado = Persistencia.cargarEstadoCadena((String) request
					.getSession().getAttribute("estado"));
			System.out.println("Estado en el action "+estado.getEstado()+" hexa "+estado.getHexadecimal());
			//Ingresa la orden a la bd, luego esta se envía al coord, para que haga el cambio correspondiente
			//ActionMessages mensajes=new ActionMessages();
			if (Utilidades.existeActualizacionEP(ep)) {
				//mostrar error
				System.out.println("Ya hay actualizacion");
				//mensajes.add("error",new ActionMessage("Ya hay actualizacion"));
				//this.saveErrors(request, mensajes);
				request
						.getSession()
						.setAttribute("mensaje",
								"No se puede procesar la orden debido a que hay una pendiente");
				
				response.setHeader("Cache-control","no-cache");
				response.setHeader("Pragma","no-cache");
				response.setDateHeader ("Expires", 0);
				return mapping.findForward("continuar");
			} else {
				Actualizacion actualizacion = new Actualizacion();
				actualizacion.setEp(sensor);
				actualizacion.setId_estado(estado);
				Persistencia.guardar(actualizacion);
				//mensajes.add("error",new ActionMessage("En un momento se carga"));
				//this.saveErrors(request, mensajes);
				request.getSession().setAttribute("mensaje",
						"En un momento se actualizará su hogar");
				
				response.setHeader("Cache-control","no-cache");
				response.setHeader("Pragma","no-cache");
				response.setDateHeader ("Expires", 0);
				return mapping.findForward("continuar");
			}
		}
		response.setHeader("Cache-control","no-cache");
		response.setHeader("Pragma","no-cache");
		response.setDateHeader ("Expires", 0);
		return mapping.findForward("continuar");
	}
}